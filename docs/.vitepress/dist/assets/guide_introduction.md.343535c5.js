import{_ as e,o as r,c as s,a as t}from"./app.68c213a2.js";const m=JSON.parse('{"title":"Using vitepress in Markdown","description":"","frontmatter":{},"headers":[{"level":2,"title":"Browser API Access Restrictions","slug":"browser-api-access-restrictions","link":"#browser-api-access-restrictions","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"relativePath":"guide/introduction.md"}'),n={name:"guide/introduction.md"},i=t('<h1 id="using-vitepress-in-markdown" tabindex="-1">Using vitepress in Markdown <a class="header-anchor" href="#using-vitepress-in-markdown" aria-hidden="true">#</a></h1><h2 id="browser-api-access-restrictions" tabindex="-1">Browser API Access Restrictions <a class="header-anchor" href="#browser-api-access-restrictions" aria-hidden="true">#</a></h2><p>Because VuePress applications are server-rendered in Node.js when generating static builds, any Vue usage must conform to the <a href="https://ssr.vuejs.org/en/universal.html" target="_blank" rel="noreferrer">universal code requirements</a>. In short, make sure to only access Browser / DOM APIs in <code>beforeMount</code> or <code>mounted</code> hooks.</p><p>If you are using or demoing components that are not SSR friendly (for example containing custom directives), you can wrap them inside the built-in <code>&lt;ClientOnly&gt;</code> component:</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>',5),o=[i];function a(c,d,l,h,u,p){return r(),s("div",null,o)}const g=e(n,[["render",a]]);export{m as __pageData,g as default};
